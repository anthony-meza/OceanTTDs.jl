var documenterSearchIndex = {"docs":
[{"location":"#TCMGreensFunctions","page":"Home","title":"TCMGreensFunctions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TCMGreensFunctions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#TCMGreensFunctions.BoundaryPropagator","page":"Home","title":"TCMGreensFunctions.BoundaryPropagator","text":"BoundaryPropagator\n\nModeling boundary propagation with propagator functions and atmospheric source terms.\n\nFields\n\nGp_arr: Matrix of boundary propagator functions\nf_atm: Vector of atmospheric source functions\nt_vec: Vector of time points\nC0: Initial tracer concentration vector (optional)\nt0: Reference time (optional)\n\n\n\n\n\n","category":"type"},{"location":"#TCMGreensFunctions.TracerInverseGaussian","page":"Home","title":"TCMGreensFunctions.TracerInverseGaussian","text":"TracerInverseGaussian(Œì,Œî)\n\nusing LinearAlgebra: NumberArray\n\nThe tracer inverse Gaussian distribution with mean Œì and width Œî has probability density function\n\nG(ùê± tau) = sqrtfracGamma^3 4 pi Delta^2 tau^3  exp left( - fracGamma (tau - Gamma)^24 Delta ^2 tauright) \n\nTracerInverseGaussian()              # Tracer Inverse Gaussian distribution with unit mean and unit width, i.e. TracerInverseGaussian(1, 1)\nTracerInverseGaussian(Œì, Œî)          # Tracer Inverse Gaussian distribution with mean Œì and width Œî\n\nparams(d)           # Get the parameters, i.e. (Œì, Œî)\nmean(d)             # Get the mean parameter, i.e. Œì\nshape(d)            # Get the shape parameter, i.e. Œî\n\nExternal links\n\nCompare to Inverse Gaussian distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"#TCMGreensFunctions.boundary_propagator_timeseries-Tuple{AbstractMatrix{<:Function}, AbstractVector{Union{Function, Interpolations.AbstractInterpolation}}, AbstractVector{<:Real}}","page":"Home","title":"TCMGreensFunctions.boundary_propagator_timeseries","text":"boundary_propagator_timeseries(Gp_arr, f_atm, t_vec)\n\nCalculate convolutions for matrix of propagators with vector of sources.\n\nReturns 3D array with dimensions [propagatorrow, sourcecolumn, time].\n\n\n\n\n\n","category":"method"},{"location":"#TCMGreensFunctions.boundary_propagator_timeseries-Tuple{BoundaryPropagator}","page":"Home","title":"TCMGreensFunctions.boundary_propagator_timeseries","text":"boundary_propagator_timeseries(bp::BoundaryPropagator)\n\nCalculate convolution using data stored in a BoundaryPropagator object.\n\n\n\n\n\n","category":"method"},{"location":"#TCMGreensFunctions.boundary_propagator_timeseries-Tuple{Function, Any, Any}","page":"Home","title":"TCMGreensFunctions.boundary_propagator_timeseries","text":"boundary_propagator_timeseries(Gp, f_atm, t_vec)\n\nCalculate convolution of a boundary propagator with surface source using discrete Simpson's integration.\n\n\n\n\n\n","category":"method"},{"location":"#TCMGreensFunctions.simpsons_integral-NTuple{4, Any}","page":"Home","title":"TCMGreensFunctions.simpsons_integral","text":"simpsons_integral(f, a, b, N)\n\nNumerically integrate f from a to b using Simpson's rule with N intervals (N must be even).\n\n\n\n\n\n","category":"method"}]
}
